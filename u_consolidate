#!/usr/bin/python3

# ~/dev/py/xlattice_py/uConsolidate

import os
import shutil
import stat
import sys
from argparse import ArgumentParser

from xlattice import (__version__, __version_date__, Q)
from xlattice.u import file_sha1hex

###############################
# XXX assumes usingSHA == True
###############################


def doRun(options):
    dontDoIt = options.dontDoIt
    inDir = options.inDir
    maxCount = options.maxCount
    outDir = options.outDir
    verbose = options.verbose
    writing = options.writing

    os.makedirs(outDir, exist_ok=True)
    count = 0
    for i in range(256):
        subDir = "%s/%02x" % (inDir, i)
        if not os.path.exists(subDir):
            continue
        destSubDir = "%s/%02x" % (outDir, i)
        os.makedirs(destSubDir, exist_ok=True)
        for j in range(256):
            subSubDir = "%s/%02x" % (subDir, j)
            if not os.path.exists(subSubDir):
                continue
            destSubSubDir = "%s/%02x" % (destSubDir, i)
            os.makedirs(destSubSubDir, exist_ok=True)
            files = os.listdir(subSubDir)
            if files:
                for file in files:
                    count = count + 1
                    pathToSrc = os.path.join(subSubDir, file)
                    key = file_sha1hex(pathToSrc)
                    # what whould be the the normal case
                    if key == file:
                        pathToDest = os.path.join(destSubSubDir, file)
                        if dontDoIt:
                            print("would be moving\n\t%s to \n\t%s" % (
                                pathToSrc, pathToDest))
                        else:
                            # check write permission on source
                            srcInfo = os.lstat(pathToSrc)
                            srcMode = srcInfo[stat.ST_MODE]
                            if (srcMode & stat.S_IWUSR) == 0:
                                os.chmod(pathToSrc, 0o644)
                            # check write permission on destination
                            try:
                                # doesn't follow links
                                destInfo = os.lstat(pathToDest)
                            except FileNotFoundError:
                                destInfo = None
                            if destInfo:
                                destMode = destInfo[stat.ST_MODE]
                                if not (destMode & stat.S_IWUSR):
                                    os.chmod(pathToDest, 0o644)
                                    # DEBUG
                                    print("changed dest perms")
                                    # END
                            shutil.move(pathToSrc, pathToDest)
                            # XXX COULD RESTORE srcMode HERE
                            if verbose:
                                print("moved\n\t%s to \n\t%s" % (
                                    pathToSrc, pathToDest))
                    else:
                        print("content hash is %s but file name is %s" % (
                            key, file))

                    if count >= maxCount:
                        return


def main():

    # program defaults ----------------------------------------------

    # parse the command line ----------------------------------------
    DESC = 'move valid files from input U subdirectory to output subdir'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-b', '--baseDir', default="./",
                        help='base directory holding U subdirectories')

    parser.add_argument('-i', '--inDir', type=str,
                        help='source U directory')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    parser.add_argument('-n', '--maxCount', default='1',
                        help='number of files to move; -1 = all of them')

    parser.add_argument('-o', '--outDir', default='Ue',
                        help='destination U directory')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')

    parser.add_argument('-w', '--writing', action='store_true',
                        help='overwrite existing files')

    parser.add_argument('-z', '--dontDoIt', action='store_true',
                        help="don't do anything, just say what you would do")

    args = parser.parse_args()

    # fixups --------------------------------------------------------
    if args.maxCount == '-1':
        args.maxCount = sys.maxsize
    else:
        args.maxCount = int(args.maxCount)

    # sanity checks -------------------------------------------------
    if args.maxCount <= 0:
        print("number of files to move must be a positive number")
        parser.print_help()
        sys.exit(1)

    if args.baseDir != './':
        if not os.path.exists(args.baseDir):
            print("base directory '%s' does not exist" % args.baseDir)
            parser.print_help()
            sys.exit(1)
        os.chdir(args.baseDir)

    if not args.inDir or not os.path.exists(args.inDir):
        print("input directory '%s' does not exist" % args.inDir)
        parser.print_help()
        sys.exit(1)

    if not args.outDir or not os.path.exists(args.outDir):
        print("output directory '%s' does not exist" % args.outDir)
        parser.print_help()
        sys.exit(1)

    # complete setup ------------------------------------------------
    appName = 'uConsolidate %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('baseDir      = ' + str(args.baseDir))
        print('maxCount     = ' + str(args.maxCount))
        print('dontDoIt     = ' + str(args.dontDoIt))
        print('inDir        = ' + str(args.inDir))
        print('outDir       = ' + str(args.outDir))
        print('justShow     = ' + str(args.justShow))
        print('verbose      = ' + str(args.verbose))
        print('writing      = ' + str(args.writing))

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    doRun(args)

    # gitMgr = GitMgr()           # acquire lock
    # try:
    #    doRun(args)
    # except:
    #    pass
    # gitMgr.close()              # release lock

if __name__ == '__main__':
    main()
