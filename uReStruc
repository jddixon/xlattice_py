#!/usr/bin/python3

# ~/dev/py/xlattice_py/uReStruc

import os
import stat
import sys
from argparse import ArgumentParser

from xlattice import (__version__, __version_date__)
from xlattice.stats import collectStats
from xlattice.u import UDir


def reStrucUDir(uPath, newStruc, outPath="", verbose=False):

    # XXX outPath not used

    uDir = UDir.discover(uPath)
    uDir.reStruc(newStruc)


def main():

    # program defaults ----------------------------------------------

    # parse the command line ----------------------------------------
    DESC = 'modify directory structure for uDir; this is a low-level operation which does not alter L'

    parser = ArgumentParser(description=DESC)

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    parser.add_argument('-o', '--outPath', type=str,
                        help='optional destination directory')

    parser.add_argument('-s', '--newStrucName', type=str,
                        help="new dirStruc (DIR_FLAT, DIR16x16, or DIR256x256")

    parser.add_argument('-u', '--uPath', type=str,
                        help='path to uDir (no default)')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')

    args = parser.parse_args()

    # complete setup ------------------------------------------------
    appName = 'uReStruc %s' % __version__
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    # fixups and sanity checks --------------------------------------

    if not args.uPath or not os.path.exists(args.uPath):
        print("input directory '%s' does not exist" % args.uPath)
        parser.print_help()
        sys.exit(1)

    if not args.newStrucName or not args.newStrucName in UDir.DIR_STRUC_NAMES:
        print(
            "you must specify a directory structure, one of %s" %
            DIR_STRUC_NAMES)
        parser.print_help()
        sys.exit(1)

    args.uDir = UDir.discover(args.uPath)
    args.oldStruc = args.uDir.dirStruc     # an int
    args.newStruc = UDir.nameToDirStruc(args.newStrucName)
    args.oldStrucName = UDir.dirStrucToName(args.oldStruc)

    if args.oldStrucName != args.newStrucName:
        print("restructuring from %s to %s" % (
            args.oldStrucName, args.newStrucName))
    else:
        print("retaining %s" % args.oldStrucName)

    if args.outPath and os.path.exists(args.outPath):
        print("output directory '%s' already exists" % args.outPath)
        parser.print_help()
        sys.exit(1)

    if args.verbose or args.justShow:
        print('justShow     = ' + str(args.justShow))
        print('uPath        = ' + str(args.uPath))
        print('outPath      = ' + str(args.outPath))
        print('old dirStruc = %d, %s' % (args.oldStruc, args.oldStrucName))
        print('new dirStruc = %d, %s' % (args.newStruc, args.newStrucName))
        print('verbose      = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)
    reStrucUDir(args.uPath, args.newStruc, args.outPath, args.verbose)

if __name__ == '__main__':
    main()
