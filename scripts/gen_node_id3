#!/usr/bin/env python3

"""
python/u/scriptsgenNodeID3.py -- uses the contents of a subdirectory in U
to generate a 256-bit hash.  If for example U is /var/U and the
subdirectory is 'ff', then all of the files below /var/U/ff will be
walked in creating the hash.
"""

# pylint: disable=unused-import
import hashlib
import getopt
import io
import re
import sys
import os
from os.path import join
from random import randint
from xlattice.u import ULock

if sys.version_info < (3, 6):
    # pylint: disable=unused-import
    import sha3     # monkey-patches hashlib

# DEFAULTS for command line arguments ###############################
# a random number between 00 and 0xff
sub_dir = str("%02x" % randint(0, 0xff))
u_dir = '/var/U'
verbose = False

# UTILITY FUNCTIONS #################################################


def get_node_id3(sub_dir, u_dir='/var/U'):
    lock = ULock(u_dir)
    lock.get_lock()

    sha = hashlib.sha3_256()
    sub_dir = "%s/%s" % (u_dir, sub_dir)
    for root, dirs, files in os.walk(sub_dir):
        for name in files:
            abs_path = join(root, name)
            try:
                file = io.FileIO(abs_path, "r")
                reader = io.BufferedReader(file)
                while True:
                    byte_str = reader.read(io.DEFAULT_BUFFER_SIZE)
                    if len(byte_str) == 0:
                        break
                    sha.update(byte_str)
            except Exception as exc:
                print("unexpected exception reading %s: %s" % (abs_path, str(exc)))
                # otherwise we just ignore it

    lock.release_lock()
    return sha.hexdigest()        # a string

# COMMAND LINE HANDLING #############################################


def usage():
    string = [
        'usage: genNodeID3 [options]',
        'where the options are',
        '  -h/--help     view this very helpful message',
        '  -s/--subDir   select the subdirectory to process',
        '  -u/--uDir     where the U directory is',
        '  -v/--verbose  be chatty',
        'Generates a nodeID as the SHA3 of the pid and the contents of subDir',
    ]
    print('\n'.join(string))
    sys.exit()

arg_vec = sys.argv[1:]
try:
    opts, args = getopt.getopt(arg_vec, "hs:u:v",
                               ["help", "sub_dir", "u_dir", "verbose"])
except getopt.GetoptError as err:
    print(str(err))
    usage()

for o, aVal in opts:
    if o in ('-h', '--help'):
        usage()
    elif o in ('-s', '--subDir'):
        sub_dir = aVal

    elif o in ('-v', '--verbose'):
        showVersion = True
        verbose = True
    elif o in ('-u', '--uDir'):
        u_dir = aVal
    else:
        assert False, 'unhandled option'

if (not re.match("^[0-9a-fA-F]{2}$", sub_dir)):
    print("subDir '%s' should be a two-digit hex number" % sub_dir)
    usage()
    sys.exit()
sub_dir = sub_dir.lower()

if (verbose):
    print("pid    = %u" % os.getpid())
    print("subDir = %s" % sub_dir)
    print("uDir   = %s" % u_dir)
    print('')

# notice that the order of names is odd!
node_id = get_node_id3(sub_dir, u_dir)
print(node_id)
