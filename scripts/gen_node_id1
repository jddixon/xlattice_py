#!/usr/bin/env python3

# python/u/scriptsgenNodeID1.py -- uses the contents of a subdirectory in U
# to generate a 160-bit hash.  If for example U is /var/U and the
# subdirectory is 'ff', then all of the files below /var/U/ff will be
# walked in creating the hash.

import getopt
import io
import hashlib
import re
import sys
import os
from os.path import join
from random import randint
# XXX this import does not succeed until u has been installed; need
# better understanding of search path
from ulock import ULock
import u256x256

# DEFAULTS for command line arguments ###############################
# a random number between 00 and 0xff
subDir = str("%02x" % randint(0, 0xff))
u_dir = '/var/U'
verbose = False

# UTILITY FUNCTIONS #################################################


def genNodeID1(subDir, u_dir='/var/U'):
    lock = ULock(u_dir)
    lock.get_lock()

    dVal = hashlib.sha1()
    subDir = "%s/%s" % (u_dir, subDir)
    for root, dirs, files in os.walk(subDir):
        for name in files:
            absPath = join(root, name)
            try:
                file = io.FileIO(absPath, "r")
                r = io.BufferedReader(file)
                while True:
                    byteStr = r.read(io.DEFAULT_BUFFER_SIZE)
                    if len(byteStr) == 0:
                        break
                    dVal.update(byteStr)
            except Exception as e:
                print "unexpected exception reading %s: %s" % (absPath, str(e))
                # otherwise we just ignore it

    lock.release_lock()
    return dVal.hexdigest()        # a string

# COMMAND LINE HANDLING #############################################


def usage():
    print "usage message"

argVec = sys.argv[1:]
try:
    opts, args = getopt.getopt(argVec, "hs:u:v",
                               ["help", "subDir", "u_dir", "verbose"])
except getopt.GetoptError as err:
    print str(err)
    usage()
    sys.exit(2)

for o, aVal in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit()
    elif o in ('-s', '--subDir'):
        subDir = aVal

    elif o in ('-v', '--verbose'):
        showVersion = True
        verbose = True
    elif o in ('-u', '--uDir'):
        u_dir = aVal
    else:
        assert False, 'unhandled option'

if (not re.match("^[0-9a-fA-F]{2}$", subDir)):
    print "subDir '%s' should be a two-digit hex number" % subDir
    usage()
    sys.exit()
subDir = subDir.lower()

if (verbose):
    print "pid    = %u" % os.getpid()
    print "subDir = %s" % subDir
    print "uDir   = %s" % u_dir
    print ''

# notice that the order of names is odd!
node_id = genNodeID1(subDir, u_dir)
print node_id
